Coroutine roots, created by COROUTINE_BEGIN, have the following methods:

.Get()
    Returns a value that has been returned by either YIELD, PAUSE, or RETURN. If no value has
    been returned from the coroutine then this method returns <undefined>.

.Resume()
    Resumes execution of a coroutine after it has paused at a PAUSE command. If the coroutine
    has not paused at a PAUSE command this method does nothing. .Resume() resets the returned
    value for the coroutine to <undefined>.

.IsPaused()
    Returns if a coroutine has been paused by a PAUSE command.

.Cancel()
    Immediately ceases execution of code for the coroutine. Be careful with this method as it
    may lead to memory leaks if used incorrectly.

.Restart()
    Begins code execution from the start of a coroutine's code. No variables will be reset!
    Make sure that you're appropriately clearing the variable state of your coroutine if
    you're planning on using this feature.

.GetComplete()
    Returns if the coroutine has finished executing code, either because a RETURN command
    was encountered or if the coroutine ran out of code to execute. If a function is set to
    execute continuously (see below) then this function will only return <true> if RETURN
    is encountered.

.SetDuration(approxDuration)
    Sets how long a coroutine should be executed for every frame. This value is in microseconds
    (a microsecond is 1000 milliseconds). This is an approximate lower bound for execution.
    Setting an execution duration is optional but can be useful to avoid having to figure out
    where to place YIELD commands.

.GetDuration()
    The permitted duration for execution per frame (approximate, see above)

.SetContinuous(state)
    Sets a coroutine to execute continuously - it'll restart execution after reaching the end
    of its code. A coroutine set to execute continuously will not restart after a RETURN
    command is called - the RETURN command stops the coroutine entirely.

.GetContinuous()
    Returns whether the coroutine is set to execute continuously (see above)